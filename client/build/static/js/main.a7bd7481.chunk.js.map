{"version":3,"sources":["Components/Tabs.js","API.js","App.js","serviceWorker.js","index.js"],"names":["Tabs","props","useState","activeTab","setActiveTab","toggle","tab","Nav","tabs","NavItem","NavLink","className","classnames","active","onClick","TabContent","TabPane","style","backgroundColor","borderColor","height","tabId","Container","Row","Col","padding","lg","sm","Card","body","outline","color","CardText","lat","lng","onSubmit","submission","value","latitude","placeholder","longitude","Button","margin","type","subs","namers","description","mintemp","maxtemp","temp","feelslike","clicked","windchill","windspeed","humidity","children","chillin","API_URL","window","location","hostname","myIcon","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","greenIcon","API_KEY","App","state","zoom","haveLocation","userMessage","FirstName","LastName","Report","weather","MaxTemp","MinTemp","WindSpeed","locality","FeelsLike","RainChance","showMessageForm","sendingMessage","sentMessage","messages","getWeather","e","a","async","fetch","Call","json","data","console","log","setState","main","temp_max","temp_min","WindChill","wind","deg","speed","name","feels_like","rain","Promise","resolve","navigator","geolocation","getCurrentPosition","position","coords","then","res","cancelMessage","FormIsValid","trim","length","formSubmitted","event","preventDefault","message","method","headers","JSON","stringify","sendMessage","result","setTimeout","setLocation","target","valueChanged","prevState","pushers","indents","otherMessages","i","push","key","haveSeenLocation","reduce","all","toFixed","this","Map","center","background","TileLayer","attribution","url","Marker","Popup","map","_id","heading","ListGroupItem","ListGroupItemHeading","ListGroupItemText","autoPlay","loop","src","Form","FormGroup","Label","for","Input","id","onChange","FormText","disabled","Component","Boolean","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"ulBA6IeA,G,0CAlIF,SAACC,GAAW,IAAD,EACYC,mBAAS,KADrB,mBACfC,EADe,KACJC,EADI,KAGhBC,EAAS,SAAAC,GACVH,IAAcG,GAAKF,EAAaE,IAGrC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAKC,MAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWC,IAAW,CAAEC,OAAsB,MAAdV,IAChCW,QAAS,WAAQT,EAAO,OAF1B,YAOF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWC,IAAW,CAAEC,OAAsB,MAAdV,IAChCW,QAAS,WAAQT,EAAO,OAF1B,eAOF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAWC,IAAW,CAAEC,OAAsB,MAAdV,IAChCW,QAAS,WAAQT,EAAO,OAF1B,YAOF,kBAACI,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,QAIF,kBAACK,EAAA,EAAD,CAAaZ,UAAWA,GACtB,kBAACa,EAAA,EAAD,CAASC,MAAO,CAAEC,gBAAiB,GAAIC,YAAa,GAAGC,OAAO,SAAUC,MAAM,KAE5E,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMP,MAAO,CAACQ,QAAS,QAAWC,GAAG,IAAIC,GAAG,KAC5C,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAM,YAAYd,MAAO,CAAEC,gBAAgB,GAAKC,YAAa,GAAGC,OAAO,UACxF,gCAAK,6CAEL,kBAACY,EAAA,EAAD,kBAAqB/B,EAAMgC,KAC3B,kBAACD,EAAA,EAAD,mBAAsB/B,EAAMiC,KAE5B,0BAAMC,SAAUlC,EAAMmC,YACtB,2BAAOC,MAAOpC,EAAMqC,SAAUC,YAAY,aAD1C,IACwD,2BAAOF,MAAOpC,EAAMuC,UAAWD,YAAY,cAEnG,kBAACE,EAAA,EAAD,CAAQxB,MAAO,CAACyB,OAAO,OAASC,KAAK,UAArC,QAEE,0BAAMR,SAAUlC,EAAM2C,MACtB,2BAAOP,MAAOpC,EAAMqC,SAAUC,YAAY,gBAC1C,kBAACE,EAAA,EAAD,CAAQxB,MAAO,CAACyB,OAAO,OAAUC,KAAK,UAAtC,WAQN,kBAACnB,EAAA,EAAD,CAAMP,MAAO,CAACQ,QAAS,QAAWC,GAAG,IAAIC,GAAG,KAC5C,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAM,YAAYd,MAAO,CAAkCE,YAAa,GAAGC,OAAO,UACnG,gCAAK,0DAAgCnB,EAAM4C,OAAtC,MACL,yCAAe5C,EAAM6C,aACrB,mDAAyB7C,EAAM8C,QAA/B,MAA2C9C,EAAM+C,QAAjD,MACA,mDAAyB/C,EAAMgD,KAA/B,KACA,0CAAgBhD,EAAMiD,UAAtB,UAEA,kBAACT,EAAA,EAAD,CAAQX,SAAO,EAACC,MAAM,UAAUjB,QAASb,EAAMkD,SAA/C,iBAIJ,kBAAC3B,EAAA,EAAD,CAAKP,MAAO,CAAEQ,QAAS,QAAUC,GAAG,IAAIC,GAAG,KAC3C,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAACC,MAAM,YAAYd,MAAO,CAAkCE,YAAa,GAAGC,OAAO,UAInG,kBAACY,EAAA,EAAD,yBAA4B/B,EAAMmD,UAAlC,SACA,0CAAgBnD,EAAMoD,UAAtB,OACA,yCAAepD,EAAMqD,SAArB,WAQV,kBAACtC,EAAA,EAAD,CAASK,MAAM,IAAIJ,MAAOhB,EAAMgB,OAC9B,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKG,GAAG,MACN,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACT5B,EAAMsD,aAKb,kBAACvC,EAAA,EAAD,CAASK,MAAM,KACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKP,MAAO,CAAEQ,QAAS,QAAUC,GAAG,KAAKC,GAAG,MAM3C1B,EAAMuD,gB,6CC7HbC,EAAuC,cAA7BC,OAAOC,SAASC,SAA2B,wCAA0C,4C,+BCa/FC,EAASC,IAAEC,KAAK,CACpBC,QAAS,qFACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,KAAM,IACnBC,YAAa,CAAC,GAAI,MAGhBC,EAAYN,IAAEC,KAAK,CACnBC,QAAS,yDACTC,SAAc,CAAC,GAAI,IACnBC,WAAc,CAAC,KAAM,IACrBC,YAAc,CAAC,GAAI,MAGfE,EAAU,mCA0VHC,E,2MArVbC,M,aAEItC,IAAK,MACLC,KAAK,IACLsC,KAAK,GACLC,cAAc,EACdC,YAAa,CAEXC,UAAW,GACXC,SAAU,GACVC,OAAQ,IAIVC,QAAS,CACPC,QAAS,GACTC,QAAS,GACT/B,KAAM,GACNH,YAAa,GACbQ,SAAU,GACV2B,UAAW,GACXC,SAAU,GACVC,UAAW,GACXC,WAAY,IAGdC,iBAAiB,EACjBC,gBAAgB,EAChBC,aAAa,EACbC,SAAS,I,OACH,G,EA+BTC,WAAa,SAAOC,GAAP,iBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAEOE,MAAM,uDAAD,OAAwD,EAAKtB,MAAMtC,IAAnE,gBAA8E,EAAKsC,MAAMrC,IAAzF,kBAAsGmC,EAAtG,qBAFZ,cAENyB,EAFM,kBAAAH,EAAA,MAGOG,EAAKC,QAHZ,OAGNC,EAHM,OAIZC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZrB,QAAQ,CACNC,QAASiB,EAAKI,KAAKC,SACnBrB,QAASgB,EAAKI,KAAKE,SACnBrD,KAAM+C,EAAKI,KAAKnD,KAChBH,YAAakD,EAAKlB,QAAQ,GAAGhC,YAC7BQ,SAAU0C,EAAKI,KAAK9C,SACpBiD,UAAWP,EAAKQ,KAAKC,IACrBxB,UAAWe,EAAKQ,KAAKE,MACrBxB,SAAUc,EAAKW,KACfxB,UAAWa,EAAKI,KAAKQ,WACrBxB,WAAYY,EAAKa,QAGrBZ,QAAQC,IAAI,EAAK3B,OAnBL,sC,EAuBdc,gBAAkB,WAChB,EAAKc,SAAS,CACZd,iBAAiB,ID9Fd,IAAIyB,SAAQ,SAACC,GAClBC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCJ,EAAQ,CACN9E,IAAKkF,EAASC,OAAO9E,SACrBJ,IAAKiF,EAASC,OAAO5E,eAEtB,WACDuE,EAAQlB,MAAM,yBACXwB,MAAK,SAAAC,GAAG,OAAIA,EAAIvB,UAChBsB,MAAK,SAAA1D,GACJ,MAAO,CACL1B,IAAK0B,EAASrB,SACdJ,IAAKyB,EAASnB,qBCqFrB6E,MAAK,SAAA1D,GACJ,EAAKwC,SAAS,CACZxC,WACAc,cAAc,EACdD,KAAM,S,EAKZ+C,cAAgB,WACd,EAAKpB,SAAS,CACZd,iBAAiB,K,EAMrBmC,YAAc,WAAO,IAAD,EACoB,EAAKjD,MAAMG,YAA3CC,EADY,EACZA,UAAWC,EADC,EACDA,SAAUC,EADT,EACSA,OAU3B,OATAF,EAAYA,EAAU8C,OACtB7C,EAAWA,EAAS6C,OACpB5C,EAASA,EAAO4C,WAGd9C,EAAU+C,OAAS,GAAK/C,EAAU+C,QAAU,IAC5C9C,EAAS8C,OAAS,GAAK9C,EAAS8C,QAAU,IAC1C7C,EAAO6C,OAAS,GAAK7C,EAAO6C,QAAU,OAEjB,EAAKnD,MAAME,e,EAGpCkD,cAAgB,SAACC,IACfA,EAAMC,iBAEF,EAAKL,iBACP,EAAKrB,SAAS,CACZb,gBAAgB,IDlHjB,SAAqBwC,GAC1B,OAAOjC,MAAMpC,EAAS,CACpBsE,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBnG,KAAMoG,KAAKC,UAAUJ,KACpBT,MAAK,SAAAC,GAAG,OAAIA,EAAIvB,UCsHfoC,CARgB,CACdxD,UAAW,EAAKJ,MAAMG,YAAYC,UAClCC,SAAU,EAAKL,MAAMG,YAAYE,SACjCC,OAAQ,EAAKN,MAAMG,YAAYG,OAC/BvC,SAAU,EAAKiC,MAAMtC,IACrBO,UAAW,EAAK+B,MAAMrC,MAIrBmF,MAAK,SAACe,GACLC,YAAW,WACT,EAAKlC,SAAS,CACZb,gBAAgB,EAChBC,aAAa,MAEd,U,EAKX+C,YAAc,SAACV,GACb,EAAKzB,SAAS,CACZlE,IAAK2F,EAAMW,OAAOjG,SAClBJ,IAAK0F,EAAMW,OAAO/F,YAEpByD,QAAQC,IAAI,EAAK3B,MAAMtC,IAAI,EAAKsC,MAAMrC,M,EAMxCsG,aAAe,SAACZ,GAAW,IAAD,EACFA,EAAMW,OAArB5B,EADiB,EACjBA,KAAMtE,EADW,EACXA,MACb,EAAK8D,UAAS,SAACsC,GAAD,MAAiB,CAC7B/D,YAAY,eACP+D,EAAU/D,YADJ,eAEViC,EAAOtE,S,EASXqG,QAAU,WACT,IAAIC,EAAU,GACd,GAAInD,SAASoD,cAAc,CACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIrD,SAASoD,cAAeC,IAC1CF,EAAQG,KAAK,uBAAGC,IAAKF,KAEvB,OACG,6BACEF,EADF,uB,mFAhJc,IAAD,OD/Db9C,MAAMpC,GACV4D,MAAK,SAAAC,GAAG,OAAIA,EAAIvB,UAChBsB,MAAK,SAAA7B,GACJ,IAAMwD,EAAmB,GACzB,OAAOxD,EAASyD,QAAO,SAACC,EAAKpB,GAC3B,IAAMiB,EAAG,UAAMjB,EAAQxF,SAAS6G,QAAQ,IAA/B,OAAoCrB,EAAQtF,UAAU2G,QAAQ,IAQvE,OAPIH,EAAiBD,IACnBC,EAAiBD,GAAKH,cAAgBI,EAAiBD,GAAKH,eAAiB,GAC7EI,EAAiBD,GAAKH,cAAcE,KAAKhB,KAEzCkB,EAAiBD,GAAOjB,EACxBoB,EAAIJ,KAAKhB,IAEJoB,IACN,OCmDJ7B,MAAK,SAAA7B,GACJ,EAAKW,SAAS,CACZX,gBAIFwB,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,EAAKhB,SAAS,CACZlE,IAAIkF,EAASC,OAAO9E,SACpBJ,IAAIiF,EAASC,OAAO5E,UACpBiC,cAAc,EACdD,KAAM,U,+BA6IZ,IAAM2C,EAAW,CAACiC,KAAK7E,MAAMtC,IAAKmH,KAAK7E,MAAMrC,KAE7C,OACI,6BAEE,kBAACmH,EAAA,EAAD,CAAK1I,UAAU,MAAM2I,OAAQnC,EAAU3C,KAAM4E,KAAK7E,MAAMC,MACxD,yBAAKvD,MAAO,CAACsI,WAAW,WAItB,kBAACC,EAAA,EAAD,CACEC,YAAY,6EACZC,IAAI,uDAGHN,KAAK7E,MAAME,aAEZ,kBAACkF,EAAA,EAAD,CACAxC,SAAUA,EACVpD,KAAMK,GAEN,kBAACwF,EAAA,EAAD,KACA,kDACA,wCAAcR,KAAK7E,MAAMtC,KACzB,yCAAemH,KAAK7E,MAAMrC,OAGd,wDAEbkH,KAAK7E,MAAMiB,SAASqE,KAAI,SAAA/B,GAAO,OAC9B,kBAAC6B,EAAA,EAAD,CACAZ,IAAKjB,EAAQgC,IACb3C,SAAU,CAACW,EAAQxF,SAAUwF,EAAQtF,WACrCuB,KAAMF,GACJ,kBAAC+F,EAAA,EAAD,KACE,2BAAI9B,EAAQlD,SAAZ,IAAuBkD,EAAQnD,UAA/B,IAA2CmD,EAAQjD,OAAnD,KACEiD,EAAQc,cAAgBd,EAAQc,cAAciB,KAAI,SAAA/B,GAAO,OAAI,uBAAGiB,IAAKjB,EAAQgC,KAAK,4BAAKhC,EAAQlD,SAAb,KAArB,IAAmDkD,EAAQnD,UAA3D,IAAuEmD,EAAQjD,WAAe,SAQzK,kBAAC,EAAD,CACA5C,IAAKmH,KAAK7E,MAAMtC,IAChBC,IAAKkH,KAAK7E,MAAMrC,IAChBuD,WAAY2D,KAAK3D,WACjB3C,YAAasG,KAAK7E,MAAMO,QAAQhC,YAChCE,QAASoG,KAAK7E,MAAMO,QAAQC,QAC5BhC,QAASqG,KAAK7E,MAAMO,QAAQE,QAC5B/B,KAAMmG,KAAK7E,MAAMO,QAAQ7B,KACzBK,SAAU8F,KAAK7E,MAAMO,QAAQxB,SAC7BF,UAAWgG,KAAK7E,MAAMO,QAAQyB,UAC9BlD,UAAW+F,KAAK7E,MAAMO,QAAQG,UAC9B8E,QAASX,KAAKV,QACdvF,QAASiG,KAAK3D,WACd5C,OAAQuG,KAAK7E,MAAMO,QAAQI,SAC3BE,WAAYgE,KAAK7E,MAAMO,QAAQM,WAC/BxC,KAAMwG,KAAKd,YACXpF,UAAWkG,KAAK7E,MAAMO,QAAQK,UAC9B3B,QAAS4F,KAAK7E,MAAMiB,SAASqE,KAAI,SAAA/B,GAAO,OACpC,kBAACkC,EAAA,EAAD,CACAjB,IAAKjB,EAAQgC,IACb3C,SAAU,CAACW,EAAQxF,SAAUwF,EAAQtF,WACrCuB,KAAMF,GAEF,kBAACmG,EAAA,EAAD,SAAgB,kBAACC,EAAA,EAAD,KAAsB,gCAASnC,EAAQlD,UAAvC,KAA4DkD,EAAQnD,WAApF,IAAsH,kBAACuF,EAAA,EAAD,UAAsBpC,EAAQxF,SAA9B,IAAyCwF,EAAQtF,UAAjD,aAAsEsF,EAAQjD,OAA9E,MACpHiD,EAAQc,cAAgBd,EAAQc,cAAciB,KAAI,SAAA/B,GAAO,OAAI,kBAACkC,EAAA,EAAD,CAAejB,IAAKjB,EAAQgC,KAA5B,IAAkC,kBAACG,EAAA,EAAD,KAAsB,gCAASnC,EAAQlD,UAAvC,KAA4DkD,EAAQnD,WAAtG,IAAwI,kBAACuF,EAAA,EAAD,SAAqBpC,EAAQxF,SAA7B,IAAwCwF,EAAQtF,UAAhD,aAAqEsF,EAAQjD,YAA+C,QAK1UuE,KAAK7E,MAAMe,eA8DF,2BAAO6E,UAAQ,EAACC,MAAI,EAACC,IAAI,yDAAzB,KA5DV,kBAACC,EAAA,EAAD,CAAMnI,SAAUiH,KAAKzB,cAAe1G,MAAO,CAACE,YAAa,GAAGC,OAAO,UACjE,kBAACmJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,aAAX,cACA,kBAACC,EAAA,EAAD,CACA/H,KAAK,OACLgE,KAAK,YACLgE,GAAG,YACHpI,YAAY,OACZqI,SAAUxB,KAAKZ,gBAKjB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,aACA,kBAACC,EAAA,EAAD,CACA/H,KAAK,OACLgE,KAAK,WACLgE,GAAG,WACHpI,YAAY,MACZqI,SAAUxB,KAAKZ,gBAIjB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,iBAAX,iBACA,kBAACC,EAAA,EAAD,CAAO/H,KAAK,SAASgE,KAAK,SAASgE,GAAG,iBACpC,gDACA,sDACA,iEACA,8DACA,0EAGJ,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,UAAX,oBACA,kBAACC,EAAA,EAAD,CACA/H,KAAK,WACLgE,KAAK,SACLgE,GAAG,SACHC,SAAUxB,KAAKZ,gBAIjB,kBAAC+B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,eAAX,gBACA,kBAACC,EAAA,EAAD,CACA/H,KAAK,OACLgE,KAAK,OACLgE,GAAG,cACHC,SAAUxB,KAAKZ,eAGf,kBAACqC,EAAA,EAAD,CAAU9I,MAAM,SAAhB,uBAIF,kBAACU,EAAA,EAAD,CAAQE,KAAK,SAASmI,UAAW1B,KAAK5B,eAAtC,iB,GAnUUuD,aCnBEC,QACW,cAA7BtH,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASqH,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBrE,WACrBA,UAAUsE,cAAcC,MAAMlE,MAAK,SAAAmE,GACjCA,EAAaC,kB","file":"static/js/main.a7bd7481.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TabContent, TabPane, Nav, NavItem, NavLink, Card, Row, Col, Button, Container } from 'reactstrap';\nimport { CardTitle, CardText } from 'reactstrap';\nimport classnames from 'classnames';\nimport Jumbo from './Jumbo';\nimport Cards from './Cards';\nimport Drop from './Dropdown';\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText,  } from 'reactstrap';\n\n\n\nconst Tabs = (props) => {\n  const [activeTab, setActiveTab] = useState('1');\n\n  const toggle = tab => {\n    if(activeTab !== tab) setActiveTab(tab);\n  }\n\n  return (\n    <div>\n      <Nav tabs >\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '1' })}\n            onClick={() => { toggle('1'); }}\n          >\n            Current\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '2' })}\n            onClick={() => { toggle('2'); }}\n          >\n            Topography\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === '3' })}\n            onClick={() => { toggle('3'); }}\n          >\n            Markers\n          </NavLink>\n        </NavItem>\n        <NavItem >\n        <NavLink>\n        </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent  activeTab={activeTab}>\n        <TabPane style={{ backgroundColor: '', borderColor: '',height:'18rem' }}tabId=\"1\">\n\n          <Container>\n            <Row>\n              <Col  style={{padding: '1rem', }} lg=\"4\" sm=\"8\">\n              <div>\n                <Card body outline color=\"secondary\" style={{ backgroundColor:'' , borderColor: '',height:'17rem' }}>\n                  <h6> <strong>Location</strong></h6>\n\n                  <CardText>Latitude: {props.lat}</CardText>\n                  <CardText>Longitude: {props.lng}</CardText>\n\n                  <form onSubmit={props.submission}>\n                  <input value={props.latitude} placeholder=\"Latitude\" /> <input value={props.longitude} placeholder=\"Longitude\" />\n\n                  <Button style={{margin:'5px',}} type=\"submit\" > Go</Button>\n                  </form>\n                    <form onSubmit={props.subs}>\n                    <input value={props.latitude} placeholder=\"City, State\" />\n                    <Button style={{margin:'5px',}}  type=\"submit\" >Go </Button>\n                    </form>\n\n\n\n                </Card>\n              </div>\n              </Col>\n              <Col  style={{padding: '1rem', }} lg=\"4\" sm=\"8\">\n              <div>\n                <Card body outline color=\"secondary\" style={{ /*backgroundColor: '#656256',*/ borderColor: '',height:'17rem' }}>\n                  <h6> <strong> Weather Conditions in {props.namers} </strong></h6>\n                  <p> Currently {props.description}</p>\n                  <p> Temperature Range: ({props.mintemp} - {props.maxtemp} )</p>\n                  <p> Actual Temperature: {props.temp} </p>\n                  <p> Feels like {props.feelslike}°F </p>\n\n                  <Button outline color=\"primary\" onClick={props.clicked}> Get Info </Button>\n                </Card>\n              </div>\n              </Col>\n              <Col style={{ padding: '1rem',}} lg=\"4\" sm=\"8\">\n              <div>\n                <Card body outline color='secondary' style={{ /*backgroundColor: '#D3B88C',*/ borderColor: '',height:'17rem' }}>\n\n\n\n                  <CardText> Wind Direction: {props.windchill}° </CardText>\n                  <p> Windspeed: {props.windspeed}mph</p>\n                  <p> Humidity: {props.humidity}%</p>\n\n                </Card>\n              </div>\n              </Col>\n            </Row>\n            </Container>\n        </TabPane>\n        <TabPane tabId=\"2\" style={props.style}>\n          <Row>\n            <Col sm=\"12\">\n              <Card body>\n              {props.children}\n              </Card>\n            </Col>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"3\">\n        <Container>\n          <Row>\n            <Col style={{ padding: '3rem',}} lg=\"12\" sm=\"12\">\n\n\n\n\n\n            {props.chillin}\n\n\n\n\n\n            </Col>\n\n          </Row>\n          </Container>\n        </TabPane>\n      </TabContent>\n    </div>\n  );\n}\n\nexport default Tabs;\n","const API_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000/api/v1/messages' : 'https://api.traildocs.xyz/api/v1/messages';\n\n\n\nexport function getMessages() {\n  return fetch(API_URL)\n    .then(res => res.json())\n    .then(messages => {\n      const haveSeenLocation = {};\n      return messages.reduce((all, message) => {\n        const key = `${message.latitude.toFixed(3)}${message.longitude.toFixed(3)}`;\n        if (haveSeenLocation[key]) {\n          haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\n          haveSeenLocation[key].otherMessages.push(message);\n        } else {\n          haveSeenLocation[key] = message;\n          all.push(message);\n        }\n        return all;\n      }, []);\n    });\n}\n\nexport function getLocation() {\n  return new Promise((resolve) => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      resolve({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n    }, () => {\n      resolve(fetch('https://ipapi.co/json')\n        .then(res => res.json())\n        .then(location => {\n          return {\n            lat: location.latitude,\n            lng: location.longitude\n          };\n        }));\n    });\n  });\n}\n\nexport function sendMessage(message) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(message)\n  }).then(res => res.json());\n}\n","/* eslint-disable */ ;\nimport React, {Component} from 'react';\nimport Joi from 'joi';\nimport L from 'leaflet';\nimport './App.css';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport Tabs from './Components/Tabs';\nimport { Form, FormGroup, Label, Input, FormText, Button, Table } from 'reactstrap';\nimport { getMessages, getLocation, sendMessage } from './API';\nimport { ListGroup, ListGroupItem, ListGroupItemHeading, ListGroupItemText } from 'reactstrap';\n\n\n\nconst myIcon = L.icon({\n  iconUrl: 'https://cdn1.iconfinder.com/data/icons/social-messaging-ui-color/254000/66-512.png',\n  iconSize: [25, 41],\n  iconAnchor: [12.5, 41],\n  popupAnchor: [0, -41]\n});\n\nvar greenIcon = L.icon({\n    iconUrl: 'https://img.icons8.com/ios-filled/50/000000/marker.png',\n    iconSize:     [15, 21], // size of the icon\n    iconAnchor:   [12.5, 41], // point of the icon which will correspond to marker's location\n    popupAnchor:  [0, -41] // point from which the popup should open relative to the iconAnchor\n});\n\n  const API_KEY = \"835b97c0a67111ffa63d717ecabf34d1\";\n\n\n\nclass App extends Component {\n  state = {\n\n      lat: 51.55,\n      lng:-0.09,\n      zoom:13,\n      haveLocation: false,\n      userMessage: {\n\n        FirstName: '',\n        LastName: '',\n        Report: '',\n\n\n      },\n      weather: {\n        MaxTemp: '',\n        MinTemp: '',\n        temp: '',\n        description: '',\n        humidity: '',\n        WindSpeed: '',\n        locality: '',\n        FeelsLike: '',\n        RainChance: ''\n\n      },\n      showMessageForm: false,\n      sendingMessage: false,\n      sentMessage: false,\n      messages:[],\n      zoom: 1\n\n  }\n\n\n\n  componentDidMount() {\n    getMessages()\n    .then(messages => {\n      this.setState({\n        messages\n      });\n    });\n\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({\n          lat:position.coords.latitude,\n          lng:position.coords.longitude,\n          haveLocation: true,\n          zoom: 19\n\n        })\n\n\n\n    });\n\n\n\n  }\n\n   getWeather = async (e) => {\n\n    const Call = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lng}&appid=${API_KEY}&units=Imperial`);\n    const data = await Call.json();\n    console.log(data);\n    this.setState({\n      weather:{\n        MaxTemp: data.main.temp_max,\n        MinTemp: data.main.temp_min,\n        temp: data.main.temp,\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        WindChill: data.wind.deg,\n        WindSpeed: data.wind.speed,\n        locality: data.name,\n        FeelsLike: data.main.feels_like,\n        RainChance: data.rain\n      }\n    })\n    console.log(this.state);\n    }\n\n\n  showMessageForm = () => {\n    this.setState({\n      showMessageForm: true\n    });\n    getLocation()\n    .then(location => {\n      this.setState({\n        location,\n        haveLocation: true,\n        zoom: 13\n      });\n    });\n  }\n\n  cancelMessage = () => {\n    this.setState({\n      showMessageForm: false\n    });\n  }\n\n\n\n  FormIsValid = () => {\n    let { FirstName, LastName, Report } = this.state.userMessage;\n    FirstName = FirstName.trim();\n    LastName = LastName.trim();\n    Report = Report.trim();\n\n    const validMessage =\n      FirstName.length > 0 && FirstName.length <= 20 &&\n      LastName.length > 0 && LastName.length <= 20 &&\n      Report.length > 0 && Report.length <= 500;\n\n    return validMessage && this.state.haveLocation ? true : false;\n  }\n\n  formSubmitted = (event) => {\n    event.preventDefault();\n\n    if (this.FormIsValid()) {\n      this.setState({\n        sendingMessage: true\n      });\n\n      const message = {\n        FirstName: this.state.userMessage.FirstName,\n        LastName: this.state.userMessage.LastName,\n        Report: this.state.userMessage.Report,\n        latitude: this.state.lat,\n        longitude: this.state.lng,\n      };\n\n      sendMessage(message)\n        .then((result) => {\n          setTimeout(() => {\n            this.setState({\n              sendingMessage: false,\n              sentMessage: true\n            });\n          }, 4000);\n        });\n    }\n  }\n\n  setLocation = (event) => {\n    this.setState({\n      lat: event.target.latitude,\n      lng: event.target.longitude,\n    });\n    console.log(this.state.lat,this.state.lng)\n  }\n\n\n\n\n  valueChanged = (event) => {\n    const {name, value} = event.target;\n    this.setState((prevState) =>  ({\n      userMessage: {\n        ...prevState.userMessage,\n      [name]: value\n\n\n      }\n\n    }))\n  }\n\n\n   pushers = () => {\n    var indents = [];\n    if (messages.otherMessages){\n      for (var i = 0; i < messages.otherMessages; i++) {\n        indents.push(<p key={i}></p>);\n      }\n      return (\n         <div>\n          {indents}\n          \"Some text value\"\n         </div>\n       );\n     }\n   }\n\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    const yellowstone = [44.4280, 110.5885]\n    return (\n        <div>\n\n          <Map className=\"Map\" center={position} zoom={this.state.zoom}>\n          <div style={{background:\"white\"}}>\n\n          </div>\n\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://{s}osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {\n               this.state.haveLocation ?\n\n              <Marker\n              position={position}\n              icon={greenIcon}\n              >\n              <Popup>\n              <h6> Current Location </h6>\n              <p>latitude: {this.state.lat}</p>\n              <p>longitude: {this.state.lng}</p>\n              </Popup>\n\n              </Marker> : <h3>Finding your location...</h3>\n            }\n            {this.state.messages.map(message => (\n              <Marker\n              key={message._id}\n              position={[message.latitude, message.longitude]}\n              icon={myIcon}>\n                <Popup>\n                  <p>{message.LastName} {message.FirstName} {message.Report} </p>\n                  { message.otherMessages ? message.otherMessages.map(message => <p key={message._id}><em>{message.LastName}:</em> {message.FirstName} {message.Report}</p>) : '' }\n                </Popup>\n              </Marker>\n            ))}\n\n          </Map>\n\n\n      <Tabs\n      lat={this.state.lat}\n      lng={this.state.lng}\n      getWeather={this.getWeather}\n      description={this.state.weather.description}\n      maxtemp={this.state.weather.MaxTemp}\n      mintemp={this.state.weather.MinTemp}\n      temp={this.state.weather.temp}\n      humidity={this.state.weather.humidity}\n      windchill={this.state.weather.WindChill}\n      windspeed={this.state.weather.WindSpeed}\n      heading={this.pushers}\n      clicked={this.getWeather}\n      namers={this.state.weather.locality}\n      RainChance={this.state.weather.RainChance}\n      subs={this.setLocation}\n      feelslike={this.state.weather.FeelsLike}\n      chillin={this.state.messages.map(message => (\n          <ListGroupItem\n          key={message._id}\n          position={[message.latitude, message.longitude]}\n          icon={myIcon}>\n\n              <ListGroupItem> <ListGroupItemHeading><strong>{message.LastName}</strong>, {message.FirstName}</ListGroupItemHeading> <ListGroupItemText>, {message.latitude},{message.longitude} Report : {message.Report} </ListGroupItemText></ListGroupItem>\n              { message.otherMessages ? message.otherMessages.map(message => <ListGroupItem key={message._id}> <ListGroupItemHeading><strong>{message.LastName}</strong>, {message.FirstName}</ListGroupItemHeading> <ListGroupItemText> {message.latitude},{message.longitude}  Report: {message.Report}</ListGroupItemText></ListGroupItem>) : '' }\n          </ListGroupItem>\n        ))}\n  >\n    {\n      !this.state.sendingMessage ?\n\n      <Form onSubmit={this.formSubmitted} style={{borderColor: '',height:'18rem', }}>\n        <FormGroup>\n          <Label for=\"FirstName\">First Name</Label>\n          <Input\n          type=\"text\"\n          name=\"FirstName\"\n          id=\"FirstName\"\n          placeholder=\"John\"\n          onChange={this.valueChanged}\n\n\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"LastName\">Last Name</Label>\n          <Input\n          type=\"text\"\n          name=\"LastName\"\n          id=\"LastName\"\n          placeholder=\"Doe\"\n          onChange={this.valueChanged}\n\n           />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleSelect\">Incident Code</Label>\n          <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\n            <option>1 - Wildlife</option>\n            <option>2 - Path Blockages</option>\n            <option>3 - Suspicious Human Activity</option>\n            <option>4 - Lost/Found Possession </option>\n            <option>5 - Other (detail in report summary)</option>\n          </Input>\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"Report\">Report statement</Label>\n          <Input\n          type=\"textarea\"\n          name=\"Report\"\n          id=\"Report\"\n          onChange={this.valueChanged}\n\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"exampleFile\">upload image</Label>\n          <Input\n          type=\"file\"\n          name=\"file\"\n          id=\"exampleFile\"\n          onChange={this.valueChanged}\n\n          />\n          <FormText color=\"muted\">\n            testing phase v0.2\n          </FormText>\n        </FormGroup>\n        <Button type=\"submit\" disabled={!this.FormIsValid()} >Submit</Button>\n\n\n      </Form> : <video autoPlay loop src=\"https://media.giphy.com/media/42KYAoPAaqIlG/giphy.mp4\"> </video>\n      }\n\n\n\n\n      </Tabs>\n\n      </div>\n    );\n  }\n\n\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}